{
	"info": {
		"_postman_id": "c326e7ac-d275-4937-898a-544129a40f69",
		"name": "GOMYGO Merchant",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40677215",
		"_collection_link": "https://kushfintech-qa.postman.co/workspace/GoMyGo~4a000e07-d272-44d8-93d6-74d93d0481d0/collection/40677215-c326e7ac-d275-4937-898a-544129a40f69?action=share&source=collection_link&creator=40677215"
	},
	"item": [
		{
			"name": "Merchant V1",
			"item": [
				{
					"name": "Get Places List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Ensure the message is \"List Place Success.\"",
									"pm.test(\"Message is 'Place Lists'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Place Lists\");",
									"});",
									"",
									"// Ensure each object in data contains 'code' and 'name' keys with non-empty values",
									"pm.test(\"Data contains objects with 'code' and 'name' keys having non-empty values\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data).to.be.an('array').that.is.not.empty;",
									"",
									"    jsonData.data.forEach(function(item) {",
									"        pm.expect(item).to.have.property('code').that.is.a('string').that.is.not.empty;",
									"        pm.expect(item).to.have.property('name').that.is.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"// // Select two random places and set environment variables 'trip-from' and 'trip-to'",
									"pm.test(\"Set environment variables 'trip-from' and 'trip-to' with random places\", function () {",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // Ensure there are at least two places in the data",
									"    pm.expect(data.length).to.be.at.least(2);",
									"",
									"    // Shuffle the data array to get random places",
									"    data = _.shuffle(data);",
									"",
									"    // Select two random places",
									"    var tripFrom = data[0];",
									"    var tripTo = data[1];",
									"",
									"    // Set the environment variables",
									"    pm.environment.set(\"trip-from\", tripFrom.code);",
									"    pm.environment.set(\"trip-to\", tripTo.code);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/place/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"place",
								"list"
							]
						},
						"description": "### Get Merchant Places List\n\nThis endpoint makes an HTTP GET request to retrieve a list of merchant places.\n\n#### Request\n\nThe request does not require a request body. It includes the following parameters:\n\n- No request body parameters are required.\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n    \"responseCode\": 6001,\n    \"message\": \"Place Lists\",\n    \"data\": [\n        {\n            \"code\": \"66613b743ed1cce090d62364\",\n            \"name\": \"Siraha\"\n        },\n        {\n            \"code\": \"65cdf4e99d5fc0e248e9cdc9\",\n            \"name\": \"radhe radhe\"\n        },\n        {\n            \"code\": \"65b2326a4986172008fb6277\",\n            \"name\": \"test\"\n        },\n        {\n            \"code\": \"65abf891a6c1d05a9301e506\",\n            \"name\": \"Bardibas  chock\"\n        },\n        {\n            \"code\": \"65abf858a6c1d05a9301e501\",\n            \"name\": \"Lahan\"\n        },\n        {\n            \"code\": \"65abf7f6a6c1d05a9301e4fc\",\n            \"name\": \"Biratnagar\"\n        },\n        {\n            \"code\": \"65aa99c72b7cdfec0e26c174\",\n            \"name\": \"Janakpur\"\n        },\n        {\n            \"code\": \"65aa999a2b7cdfec0e26c170\",\n            \"name\": \"Kathmandu Valley\"\n        }\n    ]\n}\n\n ```\n\nThe response will contain an array of `places`, where each place object includes code and name properties."
					},
					"response": []
				},
				{
					"name": "Get Trips From To",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Ensure the message is \"List Trip Success\"",
									"pm.test(\"Message is 'Trip Lists'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Trip Lists\");",
									"});",
									"",
									"// Ensure the response format is correct and required keys are present",
									"pm.test(\"Response format and required keys validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var trip = jsonData.data[0];",
									"",
									"    // Check overall structure",
									"    pm.expect(jsonData).to.have.keys(['responseCode', 'message', 'data']);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"",
									"    // Validate trip object structure",
									"    // to.have.keys will ensure only these keys are present",
									"    pm.expect(trip).to.have.keys([",
									"        'code', 'vehicle', 'startTime', 'reachTime', 'isRefundable', 'duration',",
									"        'availableSeats', 'totalSeats', 'route', 'maxPrice'",
									"    ]);",
									"",
									"    // Validate vehicle object structure",
									"    var vehicle = trip.vehicle;",
									"    pm.expect(vehicle).to.have.keys(['name', 'type', 'categories', 'facilities', 'numberPlate', 'profile']);",
									"    pm.expect(vehicle.type).to.have.property('name').that.is.a('string').that.is.not.empty;",
									"    pm.expect(vehicle.categories).to.be.an('array');",
									"    pm.expect(vehicle.facilities).to.be.an('array');",
									"    pm.expect(vehicle.numberPlate).to.be.a('string');",
									"    pm.expect(vehicle.profile).to.have.property('completedUrl').that.is.a('string');",
									"",
									"    // Validate route array structure",
									"    pm.expect(trip.route).to.be.an('array').that.is.not.empty;",
									"    trip.route.forEach(function(routeItem) {",
									"        pm.expect(routeItem).to.have.keys(['name', 'place']);",
									"        pm.expect(routeItem.name).to.be.a('string').that.is.not.empty;",
									"        pm.expect(routeItem.place).to.have.property('name').that.is.a('string').that.is.not.empty;",
									"    });",
									"",
									"    // Validate data types and values",
									"    pm.expect(trip.code).to.be.a('string').that.is.not.empty;",
									"    pm.expect(trip.startTime).to.be.a('string').that.is.not.empty;",
									"    pm.expect(trip.reachTime).to.be.a('string').that.is.not.empty;",
									"    pm.expect(trip.isRefundable).to.be.a('boolean');",
									"    pm.expect(trip.duration).to.be.a('number');",
									"    pm.expect(trip.availableSeats).to.be.a('number');",
									"    pm.expect(trip.totalSeats).to.be.a('number');",
									"    pm.expect(trip.maxPrice).to.be.a('number');",
									"    ",
									"    // Check that startTime and reachTime are not in the past",
									"    var startTime = new Date(trip.startTime);",
									"    var reachTime = new Date(trip.reachTime);",
									"    var now = new Date();",
									"    pm.expect(startTime).to.be.above(now);",
									"    pm.expect(reachTime).to.be.above(now);",
									"});",
									"",
									"// Additional test to ensure only required fields are present",
									"pm.test(\"Ensure no additional fields are present in the trip object\", function () {",
									"    var jsonData = pm.response.json();",
									"    var trip = jsonData.data[0];",
									"",
									"    var expectedKeys = [",
									"        'code', 'vehicle', 'startTime', 'reachTime', 'isRefundable', 'duration',",
									"        'availableSeats', 'totalSeats', 'route', 'maxPrice'",
									"    ];",
									"",
									"    // Check for extra keys",
									"    var actualKeys = Object.keys(trip);",
									"    var extraKeys = actualKeys.filter(key => !expectedKeys.includes(key));",
									"    pm.expect(extraKeys.length).to.eql(0);",
									"});",
									"",
									"// Select any random trip id and set trip code to selected-trip-code key",
									"pm.test(\"Select any random trip id and set trip code to selected-trip-code key\", function () {",
									"    var jsonData = pm.response.json();",
									"    var data = jsonData.data;",
									"",
									"    // Ensure there are at least two places in the data",
									"    pm.expect(data.length).to.be.at.least(1);",
									"",
									"    // Shuffle the data array to get random places",
									"    data = _.shuffle(data);",
									"",
									"    // Select two random places",
									"    var selectedTrip = data[0];",
									"",
									"    // Set the environment variables",
									"    pm.environment.set(\"selected-trip-code\", selectedTrip.code);",
									"    pm.environment.set(\"maxPrice\", selectedTrip.maxPrice);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/trip/list?from={{trip-from}}&to={{trip-to}}&date=2025-08-01",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"trip",
								"list"
							],
							"query": [
								{
									"key": "from",
									"value": "{{trip-from}}",
									"description": "loc_65ae2cbe708b5bd805bf7ef6"
								},
								{
									"key": "to",
									"value": "{{trip-to}}",
									"description": "loc_66c6c82513607661cfb08f61"
								},
								{
									"key": "date",
									"value": "2025-08-01"
								}
							]
						},
						"description": "### API Request Description\n\nThis API endpoint makes an HTTP GET request to retrieve a list of merchant trips based on the specified parameters.\n\n- `from` (query parameter): Specifies the starting location of the trip.\n    \n- `to` (query parameter): Specifies the destination of the trip.\n    \n- `date` (query parameter): Specifies the date for which the trip list is requested.\n    \n\n### Response\n\nThe response to the request is in the form of a JSON schema with the following structure:\n\n- `responseCode` (number): Indicates the response status code.\n    \n- `message` (string): Provides additional information or error messages.\n    \n- `data` (array): Contains an array of trip objects, each representing a merchant trip.\n    \n    - `code` (string): Represents the code of the trip.\n        \n    - `vehicle` (object): Contains information about the vehicle used for the trip.\n        \n        - `name` (string): Specifies the name of the vehicle.\n            \n        - `type` (object): Contains details about the type of the vehicle.\n            \n            - `name` (string): Specifies the name of the vehicle type.\n                \n        - `categories` (array): Contains the categories associated with the vehicle.\n            \n            - `name` (string): Specifies the name of the category.\n                \n        - `facilities` (array): Lists the facilities available with the vehicle.\n            \n            - `name` (string): Specifies the name of the facility.\n                \n        - `numberPlate` (string): Represents the number plate of the vehicle.\n            \n        - `profile` (object): Contains the profile information of the vehicle.\n            \n            - `completedUrl` (string): Specifies the URL for the completed profile of the vehicle.\n                \n    - `startTime` (string): Indicates the start time of the trip.\n        \n    - `reachTime` (string): Specifies the estimated time of arrival at the destination.\n        \n    - `isRefundable` (boolean): Indicates whether the trip is refundable.\n        \n    - `duration` (number): Specifies the duration of the trip.\n        \n    - `availableSeats` (number): Indicates the number of available seats for the trip.\n        \n    - `totalSeats` (number): Specifies the total number of seats available for the trip.\n        \n    - `maxPrice` (number): Represents the maximum price for the trip.\n        \n    - `route` (array): Contains the route details for the trip.\n        \n        - `name` (string): Specifies the name of the route.\n            \n        - `place` (object): Contains information about the places included in the route.\n            \n            - `name` (string): Specifies the name of the place.\n                \n\nThe response provides detailed information about the merchant trips, including vehicle details, trip timings, availability, pricing, and route information."
					},
					"response": []
				},
				{
					"name": "Fetch Trip. Seat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Ensure the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 2. Ensure the message is \"Trip Seats\"",
									"pm.test(\"Message is 'Trip Seats'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Trip Seats\");",
									"});",
									"",
									"",
									"// 3. Ensure the response format is correct and required keys are present",
									"pm.test(\"Response format and required keys validation\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check overall structure",
									"    pm.expect(jsonData).to.have.keys(['responseCode', 'message', 'data']);",
									"    pm.expect(jsonData.data).to.have.keys(['seats', 'code', 'seatInformation']);",
									"    // pm.expect(jsonData.data).to.have.key('seats');",
									"    ",
									"    // Check seats array",
									"    pm.expect(jsonData.data.seats).to.be.an('array').that.is.not.empty;",
									"",
									"    // Check code",
									"    pm.expect(jsonData.data.code).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"",
									"// 4. Validate each seat object structure and data types",
									"pm.test(\"Seats properties validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var seats = jsonData.data.seats;",
									"",
									"    seats.forEach(function(seat) {",
									"        pm.expect(seat).to.have.keys(['title', 'status', 'row', 'column', 'rowSpan', 'columnSpan', 'code','layer', 'orientation']);",
									"        pm.expect(seat.title).to.be.a('string').that.is.not.empty;",
									"        pm.expect(seat.status).to.be.a('string').that.is.not.empty;",
									"        pm.expect(seat.row).to.be.a('number').that.is.not.null;",
									"        pm.expect(seat.column).to.be.a('number').that.is.not.null;",
									"        pm.expect(seat.rowSpan).to.be.a('number').that.is.not.null;",
									"        pm.expect(seat.columnSpan).to.be.a('number').that.is.not.null;",
									"        pm.expect(seat.code).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"// 5. Check for available seats and set environment variables for two seats",
									"pm.test(\"Select two available seats and set environment variables\", function () {",
									"    var jsonData = pm.response.json();",
									"    var seats = jsonData.data.seats;",
									"",
									"    // Filter available seats",
									"    var availableSeats = seats.filter(function(seat) {",
									"        return seat.status === \"AVAILABLE\";",
									"    });",
									"",
									"    // Ensure there are at least two available seats",
									"    pm.expect(availableSeats.length).to.be.at.least(2);",
									"",
									"    // Select the first two available seats",
									"    var seat1Code = availableSeats[0].code;",
									"    var seat2Code = availableSeats[1].code;",
									"",
									"    // Set environment variables",
									"    pm.environment.set(\"seat1Code\", seat1Code);",
									"    pm.environment.set(\"seat2Code\", seat2Code);",
									"",
									"    // Log the selected seats for verification",
									"    console.log(\"Selected Seat 1:\", seat1Code);",
									"    console.log(\"Selected Seat 2:\", seat2Code);",
									"});",
									"",
									"// // 6. Ensure seat numbers are unique",
									"// pm.test(\"Ensure seat numbers are unique\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     var seats = jsonData.data.seats;",
									"",
									"//     var seatNumbers = seats.map(seat => seat.title);",
									"//     var uniqueSeatNumbers = new Set(seatNumbers);",
									"",
									"//     pm.expect(seatNumbers.length).to.eql(uniqueSeatNumbers.size);",
									"// });",
									"var template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>Title</th>",
									"        <th>Status</th>",
									"        <th>X</th>",
									"        <th>Y</th>",
									"        <th>Height</th>",
									"        <th>Width</th>",
									"        <th>Row Span</th>",
									"        <th>Column Span</th>",
									"        <th>Row</th>",
									"        <th>Column</th>",
									"        <th>Layer</th>",
									"        <th>Orientation</th>",
									"        <th>Code</th>",
									"    </tr>",
									"    ",
									"    {{#each response.data.seats}}",
									"        <tr>",
									"            <td>{{title}}</td>",
									"            <td>{{status}}</td>",
									"            <td>{{x}}</td>",
									"            <td>{{y}}</td>",
									"            <td>{{height}}</td>",
									"            <td>{{width}}</td>",
									"            <td>{{rowSpan}}</td>",
									"            <td>{{columnSpan}}</td>",
									"            <td>{{row}}</td>",
									"            <td>{{column}}</td>",
									"            <td>{{layer}}</td>",
									"            <td>{{orientation}}</td>",
									"            <td>{{code}}</td>",
									"        </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return { response: pm.response.json() }",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/trip/seats/{{selected-trip-code}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"trip",
								"seats",
								"{{selected-trip-code}}"
							]
						},
						"description": "### Retrieve Seat Information for a Selected Trip\n\nThis endpoint allows you to retrieve detailed seat information for a specific trip identified by the `selected-trip-code`.\n\n#### Request Parameters\n\n- **selected-trip-code** (path parameter): A unique identifier for the trip whose seat information you wish to retrieve.\n    \n\n#### Response Structure\n\nUpon a successful request, the API will return a JSON response with the following structure:\n\n- **responseCode**: An integer indicating the status of the response (0 for success).\n    \n- **message**: A string that may contain additional information about the request (typically empty on success).\n    \n- **data**: An object containing:\n    \n    - **seatInformation**: An object with:\n        \n        - **totalColumn**: The total number of columns in the seating arrangement.\n            \n        - **totalRow**: The total number of rows in the seating arrangement.\n            \n    - **seats**: An array of seat objects, each containing:\n        \n        - **title**: The title or designation of the seat.\n            \n        - **status**: The current status of the seat (e.g., available, booked).\n            \n        - **rowSpan**: The number of rows the seat spans.\n            \n        - **columnSpan**: The number of columns the seat spans.\n            \n        - **row**: The row number of the seat.\n            \n        - **column**: The column number of the seat.\n            \n        - **layer**: The layer of the seat in the seating arrangement.\n            \n        - **orientation**: The orientation of the seat.\n            \n        - **code**: A unique code identifying the seat.\n            \n\n#### Notes\n\n- Ensure that the `selected-trip-code` is valid to receive accurate seat information.\n    \n- The response will include an array of seats, which may be empty if there are no seats available for the trip."
					},
					"response": []
				},
				{
					"name": "Hold Seat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Ensure the status code is 200",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// 2. Ensure the message is \"Seats Hold\"",
									"pm.test(\"Message is 'Seats Hold'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Seats Hold\");",
									"});",
									"",
									"// 3. Ensure the response format is correct and required keys are present",
									"pm.test(\"Response format and required keys validation\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check overall structure",
									"    pm.expect(jsonData).to.have.keys(['responseCode', 'message', 'data']);",
									"    pm.expect(jsonData.data).to.have.keys(['sessionId', 'boardingPoints']);",
									"    ",
									"    // Check boardingPoints array",
									"    pm.expect(jsonData.data.boardingPoints).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"// 4. Validate session ID structure and data type",
									"pm.test(\"Session ID validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var sessionId = jsonData.data.sessionId;",
									"",
									"    pm.expect(sessionId).to.be.a('string').that.is.not.empty;",
									"    pm.expect(sessionId).to.match(/^[0-9a-fA-F\\-]{36}$/);",
									"});",
									"",
									"// 5. Validate each boarding point object structure and data types",
									"pm.test(\"Boarding points properties validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var boardingPoints = jsonData.data.boardingPoints;",
									"",
									"    boardingPoints.forEach(function(point) {",
									"        pm.expect(point).to.have.keys(['code', 'label']);",
									"        ",
									"        pm.expect(point.code).to.be.a('string').that.is.not.empty;",
									"        pm.expect(point.label).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"// 6. Ensure boarding points are unique",
									"pm.test(\"Ensure boarding points are unique\", function () {",
									"    var jsonData = pm.response.json();",
									"    var boardingPoints = jsonData.data.boardingPoints;",
									"",
									"    var pointCodes = boardingPoints.map(point => point.code);",
									"    var uniquePointCodes = new Set(pointCodes);",
									"",
									"    pm.expect(pointCodes.length).to.eql(uniquePointCodes.size);",
									"});",
									"",
									"// 7. Select one boarding point and set environment variables",
									"pm.test(\"Select one boarding point and set environment variables\", function () {",
									"    var jsonData = pm.response.json();",
									"    var boardingPoints = jsonData.data.boardingPoints;",
									"",
									"    // Ensure there is at least one boarding point",
									"    pm.expect(boardingPoints.length).to.be.at.least(1);",
									"",
									"    // Select the first boarding point",
									"    var selectedBoardingPoint = boardingPoints[0];",
									"",
									"    // Set environment variables",
									"    pm.environment.set(\"sessionId\", jsonData.data.sessionId);",
									"    pm.environment.set(\"boardingPointCode\", selectedBoardingPoint.code);",
									"    pm.environment.set(\"boardingPointLabel\", selectedBoardingPoint.label);",
									"    // Set Price",
									"    pm.environment.set(\"totalPrice\", pm.environment.get(\"maxPrice\"));",
									"",
									"    // Log the selected boarding point and session ID for verification",
									"    console.log(\"Session ID:\", jsonData.data.sessionId);",
									"    console.log(\"Selected Boarding Point:\", selectedBoardingPoint);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"seats\": [\n    \"{{seat1Code}}\"\n    ,\"{{seat2Code}}\"  \n    ],\n  \"tripCode\": \"{{selected-trip-code}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/booking/seat-holds",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"booking",
								"seat-holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Ensure the status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// 2. Ensure the message is \"Booking Created\"",
									"pm.test(\"Message is 'Booking Created'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Booking Created\");",
									"});",
									"",
									"// 3. Ensure the response format is correct and required keys are present",
									"pm.test(\"Response format and required keys validation\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check overall structure",
									"    pm.expect(jsonData).to.have.keys(['responseCode', 'message', 'data']);",
									"    pm.expect(jsonData.data).to.have.keys(['bookingCode']);",
									"    ",
									"    // Check bookingCode",
									"    pm.expect(jsonData.data.bookingCode).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"// 4. Validate booking code format and data type",
									"pm.test(\"Booking Code validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var bookingCode = jsonData.data.bookingCode;",
									"",
									"    pm.expect(bookingCode).to.be.a('string').that.is.not.empty;",
									"    // Assuming booking code should be a 24-character hex string",
									"    pm.expect(bookingCode).to.match(/^[0-9a-fA-F]{24}$/);",
									"});",
									"",
									"// 5. Log the booking code for verification",
									"pm.test(\"Save and Log booking code\", function () {",
									"    // Save bookingCode in Env",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"bookingCode\", jsonData.data.bookingCode);",
									"    console.log(\"Booking Code:\", jsonData.data.bookingCode);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"tripCode\": \"{{selected-trip-code}}\",\n  \"boardingPointCode\": \"{{boardingPointCode}}\",\n  \"mobileNumber\": \"{{contactPhoneNumber}}\",\n  \"name\": \"{{contactName}}\",\n  \"email\": \"\",\n  \"seats\": [\n    {\n      \"code\": \"{{seat1Code}}\",\n      \"name\": \"Jim Bode\",\n      \"age\": \"22\"\n    },\n     {\n      \"code\": \"{{seat2Code}}\",\n      \"name\": \"lolo Bode\",\n      \"age\": \"22\"\n    }\n   \n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/booking/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"booking",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Create Booking",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"tripCode\": \"{{selected-trip-code}}\",\n  \"boardingPointCode\": \"{{boardingPointCode}}\",\n  \"mobileNumber\": \"{{contactPhoneNumber}}\",\n  \"email\": \"{{contactEmailAddress}}\",\n  \"name\": \"{{contactName}}\",\n  \"seats\": [\n    {\n      \"code\": \"{{seat1Code}}\",\n      \"name\": \"Jim Bode\",\n      \"age\": \"22\"\n    }\n   \n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/api/v1/merchant/booking/create",
									"host": [
										"{{URL}}"
									],
									"path": [
										"api",
										"v1",
										"merchant",
										"booking",
										"create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "Date",
									"value": "Fri, 14 Feb 2025 09:40:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "288"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "X-RateLimit-Limit-short",
									"value": "3"
								},
								{
									"key": "X-RateLimit-Remaining-short",
									"value": "2"
								},
								{
									"key": "X-RateLimit-Reset-short",
									"value": "1"
								},
								{
									"key": "X-RateLimit-Limit-medium",
									"value": "20"
								},
								{
									"key": "X-RateLimit-Remaining-medium",
									"value": "19"
								},
								{
									"key": "X-RateLimit-Reset-medium",
									"value": "10"
								},
								{
									"key": "X-RateLimit-Limit-long",
									"value": "100"
								},
								{
									"key": "X-RateLimit-Remaining-long",
									"value": "98"
								},
								{
									"key": "X-RateLimit-Reset-long",
									"value": "42"
								},
								{
									"key": "x-custom-lang",
									"value": "en"
								},
								{
									"key": "x-timestamp",
									"value": "1739526004355"
								},
								{
									"key": "x-request-id",
									"value": "fc0acb9b-b9b1-4759-9919-e4a851f5f406"
								},
								{
									"key": "x-version",
									"value": "1"
								},
								{
									"key": "x-repo-version",
									"value": "0.0.1"
								},
								{
									"key": "ETag",
									"value": "W/\"120-8ZwgQ6zJedRfCBfOvw7vJIQNNX4\""
								},
								{
									"key": "X-Response-Time",
									"value": "242.898ms"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 500,\n    \"message\": \"Cannot read properties of undefined (reading 'index')\",\n    \"_metadata\": {\n        \"languages\": [\n            \"en\"\n        ],\n        \"timestamp\": 1739526004355,\n        \"timezone\": \"UTC\",\n        \"requestId\": \"fc0acb9b-b9b1-4759-9919-e4a851f5f406\",\n        \"path\": \"/api/v1/merchant/booking/create\",\n        \"version\": \"1\",\n        \"repoVersion\": \"0.0.1\"\n    }\n}"
						}
					]
				},
				{
					"name": "Confirm Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Ensure the status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// 2. Ensure the message is \"Payment Added\"",
									"pm.test(\"Message is 'Payment Added'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Payment Added\");",
									"});",
									"",
									"// 3. Ensure the response format is correct and required keys are present",
									"pm.test(\"Response format and required keys validation\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check overall structure",
									"    pm.expect(jsonData).to.have.keys(['responseCode', 'message', 'data']);",
									"    ",
									"    // Check data",
									"    pm.expect(jsonData.data).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"// 4. Ensure the data contains \"Payment Successful\"",
									"pm.test(\"Data contains 'Payment Successful'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.eql(\"Payment Successful\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookingCode\": \"{{bookingCode}}\",\n  \"sessionId\": \"{{sessionId}}\",\n  \"paymentAmount\":{{totalPrice}},\n  \"paymentTransactionNumber\": \"tqbwCwi7Dh\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/booking/add-payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"booking",
								"add-payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch Booking Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Ensure the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 2. Ensure the message is \"Booking Get\"",
									"pm.test(\"Message is 'Booking Get'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Booking Get\");",
									"});",
									"",
									"// 3. Ensure the response format is correct and required keys are present",
									"pm.test(\"Response format and required keys validation\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check overall structure",
									"    pm.expect(jsonData).to.have.keys(['responseCode', 'message', 'data']);",
									"    pm.expect(jsonData.data).to.have.keys(['totalFare', 'shortId', 'code']);",
									"    ",
									"    // Check data types",
									"    pm.expect(jsonData.data.totalFare).to.be.a('number');",
									"    pm.expect(jsonData.data.shortId).to.be.a('string').that.is.not.empty;",
									"    pm.expect(jsonData.data.code).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"// 4. Ensure the total fare is a positive number",
									"pm.test(\"Total fare is a positive number\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.totalFare).to.be.above(0);",
									"});",
									"",
									"// 5. Validate short ID format",
									"pm.test(\"Short ID validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var shortId = jsonData.data.shortId;",
									"",
									"    pm.expect(shortId).to.be.a('string').that.is.not.empty;",
									"    // Assuming shortId should be a 10-character alphanumeric string",
									"    pm.expect(shortId).to.match(/^[A-Z0-9]{10}$/);",
									"});",
									"",
									"// 6. Validate booking code format and data type",
									"pm.test(\"Booking Code validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var bookingCode = jsonData.data.code;",
									"",
									"    pm.expect(bookingCode).to.be.a('string').that.is.not.empty;",
									"    // Assuming booking code should be a 24-character hex string",
									"    pm.expect(bookingCode).to.match(/^[0-9a-fA-F]{24}$/);",
									"});",
									"",
									"// 7. Log the booking details for verification",
									"pm.test(\"Log booking details\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(\"Total Fare:\", jsonData.data.totalFare);",
									"    console.log(\"Short ID:\", jsonData.data.shortId);",
									"    console.log(\"Booking Code:\", jsonData.data.code);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/booking/{{bookingCode}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"booking",
								"{{bookingCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Ensure the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookingCode\": \"{{bookingCode}}\",\n  \"sessionId\": \"{{sessionId}}\",\n  \"paymentAmount\":{{totalPrice}},\n  \"paymentTransactionNumber\": \"tqbwCwi7Dh\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/ticket/download/{{bookingCode}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"ticket",
								"download",
								"{{bookingCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Destroy Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Ensure the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 2. Ensure the message is \"Seats Hold\"",
									"pm.test(\"Message is 'Seats Hold'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Seats Hold\");",
									"});",
									"",
									"// 3. Ensure the response format is correct and required keys are present",
									"pm.test(\"Response format and required keys validation\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check overall structure",
									"    pm.expect(jsonData).to.have.keys(['responseCode', 'message', 'data']);",
									"    pm.expect(jsonData.data).to.have.keys(['sessionId', 'boardingPoints']);",
									"    ",
									"    // Check boardingPoints array",
									"    pm.expect(jsonData.data.boardingPoints).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"// 4. Validate session ID structure and data type",
									"pm.test(\"Session ID validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var sessionId = jsonData.data.sessionId;",
									"",
									"    pm.expect(sessionId).to.be.a('string').that.is.not.empty;",
									"    pm.expect(sessionId).to.match(/^[0-9a-fA-F\\-]{36}$/);",
									"});",
									"",
									"// 5. Validate each boarding point object structure and data types",
									"pm.test(\"Boarding points properties validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    var boardingPoints = jsonData.data.boardingPoints;",
									"",
									"    boardingPoints.forEach(function(point) {",
									"        pm.expect(point).to.have.keys(['code', 'label']);",
									"        ",
									"        pm.expect(point.code).to.be.a('string').that.is.not.empty;",
									"        pm.expect(point.label).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"// 6. Ensure boarding points are unique",
									"pm.test(\"Ensure boarding points are unique\", function () {",
									"    var jsonData = pm.response.json();",
									"    var boardingPoints = jsonData.data.boardingPoints;",
									"",
									"    var pointCodes = boardingPoints.map(point => point.code);",
									"    var uniquePointCodes = new Set(pointCodes);",
									"",
									"    pm.expect(pointCodes.length).to.eql(uniquePointCodes.size);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sessionId\": \"{{sessionId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchant/booking/destroy-session",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchant",
								"booking",
								"destroy-session"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}